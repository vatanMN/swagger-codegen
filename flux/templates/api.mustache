using System;
using System.Collections.Generic;
using FluxCore.Adaptors;
using {{clientPackage}};
using {{packageName}}.Model;
{{#imports}}
{{/imports}}

namespace {{package}} {
  {{#operations}}

  public interface I{{classname}} {
    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}object{{/returnType}} {{nickname}} ({{#allParams}}{{#dataType}}{{{dataType}}}{{/dataType}}{{^dataType}}object{{/dataType}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    //{{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task<object>{{/returnType}} {{nickname}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    void {{nickname}}Async ({{#allParams}}{{#dataType}}{{{dataType}}}{{/dataType}}{{^dataType}}object{{/dataType}} {{paramName}}, {{/allParams}} Action<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}object{{/returnType}}> callback, Action<ApiException> error);

    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    //{{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task<object>{{/returnType}} {{nickname}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    void {{nickname}}Async ({{#allParams}}{{#dataType}}{{{dataType}}}{{/dataType}}{{^dataType}}object{{/dataType}} {{paramName}}, {{/allParams}} Action<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}object{{/returnType}}> callback);
    {{/operation}}
  }

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public class {{classname}} : I{{classname}} {

    /// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}"/> class.
    /// </summary>
    /// <param name="apiClient"> an instance of ApiClient (optional)
    /// <returns></returns>
    public {{classname}}(ApiClient apiClient = null) {
      if (apiClient == null) { // use the default one in Configuration
        this.apiClient = Configuration.apiClient; 
      } else {
        this.apiClient = apiClient;
      }
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}"/> class.
    /// </summary>
    /// <returns></returns>
    public {{classname}}(String basePath)
    {
      this.apiClient = new ApiClient(basePath);
    }

    /// <summary>
    /// Sets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public void SetBasePath(String basePath) {
      this.apiClient.basePath = basePath;
    }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public String GetBasePath(String basePath) {
      return this.apiClient.basePath;
    }

    /// <summary>
    /// Gets or sets the API client.
    /// </summary>
    /// <value>The API client</value>
    public ApiClient apiClient {get; set;}


    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}object{{/returnType}} {{nickname}} ({{#allParams}}{{#dataType}}{{{dataType}}}{{/dataType}}{{^dataType}}object{{/dataType}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {

      {{#allParams}}{{#required}}
      // verify the required parameter '{{paramName}}' is set
      if ({{paramName}} == null) throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
      {{/required}}{{/allParams}}

      var path = "{{path}}";
      path = path.Replace("{format}", "json");
      {{#pathParams}}path = path.Replace("{" + "{{baseName}}" + "}", apiClient.ParameterToString({{{paramName}}}));
      {{/pathParams}}

      var queryParams = new Dictionary<String, String>();
      var headerParams = new Dictionary<String, String>();
      var formParams = new Dictionary<String, String>();
      var fileParams = new Dictionary<String, String>();
      String postBody = null;

      {{#queryParams}} if ({{paramName}} != null) queryParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // query parameter
      {{/queryParams}}
      {{#headerParams}} if ({{paramName}} != null) headerParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // header parameter
      {{/headerParams}}
      {{#formParams}}if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", {{paramName}});{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
      {{/formParams}}
      {{#bodyParam}}postBody = apiClient.Serialize({{paramName}}); // http body (model) parameter
      {{/bodyParam}}

      // authentication setting, if any
      String[] authSettings = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

      // make the HTTP request
      Response response = (Response) apiClient.CallApi(path, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

      if (((int)response.code) >= 400) {
        throw new ApiException ((int)response.code, "Error calling {{nickname}}: " + response.data, response.data);
      }
      {{#returnType}}return ({{{returnType}}}) apiClient.Deserialize<{{{returnType}}}>(response.data);{{/returnType}}{{^returnType}}
      return apiClient.Deserialize(response.data);{{/returnType}}
    }

    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    public void {{nickname}}Async ({{#allParams}}{{#dataType}}{{{dataType}}}{{/dataType}}{{^dataType}}object{{/dataType}} {{paramName}}, {{/allParams}} Action<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}object{{/returnType}}> callback) {
      {{nickname}}Async ({{#allParams}}{{paramName}}, {{/allParams}} callback, apiClient.DefaultExceptionHandler);
    }
  
   /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    public void {{nickname}}Async ({{#allParams}}{{#dataType}}{{{dataType}}}{{/dataType}}{{^dataType}}object{{/dataType}} {{paramName}}, {{/allParams}} Action<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}object{{/returnType}}> callback, Action<ApiException> error) {


      {{#allParams}}{{#required}}
          // verify the required parameter '{{paramName}}' is set
          if ({{paramName}} == null) throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
      {{/required}}{{/allParams}}

      var path = "{{path}}";
      path = path.Replace("{format}", "json");
      {{#pathParams}}path = path.Replace("{" + "{{baseName}}" + "}", apiClient.ParameterToString({{{paramName}}}));
      {{/pathParams}}

      var queryParams = new Dictionary<String, String>();
      var headerParams = new Dictionary<String, String>();
      var formParams = new Dictionary<String, String>();
      var fileParams = new Dictionary<String, String>();
      String postBody = null;

      {{#queryParams}} if ({{paramName}} != null) queryParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // query parameter
      {{/queryParams}}
      {{#headerParams}} if ({{paramName}} != null) headerParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // header parameter
      {{/headerParams}}
      {{#formParams}}if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", {{paramName}});{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
      {{/formParams}}
      {{#bodyParam}}postBody = apiClient.Serialize({{paramName}}); // http body (model) parameter
      {{/bodyParam}}

      // authentication setting, if any
      String[] authSettings = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

      // make the HTTP request
      apiClient.CallApiAsync(path, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings, delegate(Response response){
        try{
          if (((int)response.code) >= 400) {
            throw new ApiException ((int)response.code, "Error calling {{nickname}}: " + response.data, response.data);
          }
         // callback({{#returnType}}({{{returnType}}}) apiClient.Deserialize(response.Content, typeof({{{returnType}}})){{/returnType}}{{^returnType}}(Object) apiClient.Deserialize(response.Content, typeof(object)){{/returnType}});
         callback({{#returnType}}apiClient.Deserialize<{{{returnType}}}>(response.data){{/returnType}}
         {{^returnType}}apiClient.Deserialize(response.data){{/returnType}});
        }catch(ApiException e){
          error(e);
        }
      });
      
      
    }
    {{/operation}}
  }  
  {{/operations}}
}
