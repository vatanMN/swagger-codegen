{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Flux Core Documentation",
    "description": "..."
  },
  "paths": {
    "/actions/vu.uc": {
      "get": {
        "responses": {
          "404": {
            "description": "Actions not found."
          },
          "500": {
            "description": "Limit must be greater than or equal to 1"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AnalysisResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "analysis"
        ],
        "summary": "Get create user vendor actions  [Analysis]",
        "operationId": "getVendorUserCreateActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "start time of data",
            "name": "offset",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "maksimum number of returned data",
            "name": "limit",
            "required": true,
            "type": "number"
          }
        ]
      }
    },
    "/actions/{appid}.{actiontypeid}": {
      "get": {
        "responses": {
          "404": {
            "description": "Actions not found."
          },
          "500": {
            "description": "Limit must be greater than or equal to 1"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AnalysisResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "analysis"
        ],
        "summary": "Get actions [Analysis]",
        "operationId": "getActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Aplication Type Id",
            "name": "actiontypeid",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "start time of data",
            "name": "offset",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "maksimum number of returned data",
            "name": "limit",
            "required": true,
            "type": "number"
          }
        ]
      }
    },
    "/actions/vu.uc/details/{detailname}": {
      "get": {
        "responses": {
          "404": {
            "description": "Actions not found."
          },
          "500": {
            "description": "Limit must be greater than or equal to 1"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AnalysisResponseDetails"
            }
          }
        },
        "description": "",
        "tags": [
          "analysis"
        ],
        "summary": "Get create user vendor actions details [Analysis]",
        "operationId": "getVendorUserCreateActionDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Name of detail userbase/uservendor",
            "name": "detailname",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "start time of data",
            "name": "offset",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "maksimum number of returned data",
            "name": "limit",
            "required": true,
            "type": "number"
          }
        ]
      }
    },
    "/actions/{appid}.{actiontypeid}/details/{detailname}": {
      "get": {
        "responses": {
          "404": {
            "description": "Actions not found."
          },
          "500": {
            "description": "Limit must be greater than or equal to 1"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AnalysisResponseDetails"
            }
          }
        },
        "description": "",
        "tags": [
          "analysis"
        ],
        "summary": "Get action details [Analysis]",
        "operationId": "getActionDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Aplication Type Id",
            "name": "actiontypeid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Name of detail",
            "name": "detailname",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "start time of data",
            "name": "offset",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "maksimum number of returned data",
            "name": "limit",
            "required": true,
            "type": "number"
          }
        ]
      }
    },
    "/apps/{appid}/settings": {
      "get": {
        "responses": {
          "404": {
            "description": "Application\"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "apps"
        ],
        "summary": "Get current app's settings",
        "operationId": "getAppSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "400": {
            "description": "Request body must be a non empty valid json object."
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "apps"
        ],
        "summary": "Update app's settings [Developer]",
        "operationId": "setAppSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Application settings",
            "name": "appdata",
            "required": true,
            "type":"object"
          }
        ]
      }
    },
    "/apps": {
      "post": {
        "responses": {
          "400": {
            "description": "[id] or [name]: This field is missing."
          }
        },
        "description": "",
        "tags": [
          "apps"
        ],
        "summary": "Create an App [Admin]",
        "operationId": "createApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "Application Id",
            "name": "appdata",
            "required": true,
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "No response was specified",
            "type": "array",
            "items": {
              "$ref": "#/definitions/App"
            }
          }
        },
        "description": "",
        "tags": [
          "apps"
        ],
        "summary": "Get Apps[Admin]",
        "operationId": "getApps",
        "produces": [
          "application/json"
        ]
      }
    },
    "/apps/{appid}{path}": {
      "put": {
        "responses": {
          "400": {
            "description": "[id] or [name]: This field is missing."
          }
        },
        "description": "",
        "tags": [
          "apps"
        ],
        "summary": "Update an App [Admin]",
        "operationId": "updateApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "data path",
            "name": "section",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Application Id",
            "name": "appdata",
            "required": true,
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        },
        "description": "",
        "tags": [
          "apps"
        ],
        "summary": "Get App[Admin]",
        "operationId": "getApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "data path",
            "name": "section",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/batch": {
      "post": {
        "responses": {
          "404": {
            "description": "\"method\" and \"path\" parameters are required for every sub request in batch service."
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BatchResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "batch"
        ],
        "summary": "Send batch requests",
        "operationId": "sendBatchRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "Batch request",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchRequest"
            }
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/data": {
      "get": {
        "responses": {
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "data"
        ],
        "summary": "Get custom data",
        "operationId": "getData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "data"
        ],
        "summary": "Get custom data",
        "operationId": "setData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Data object with structure defined in app manifest.",
            "name": "body",
            "required": true,
            "type": "object"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/data/{section}": {
      "get": {
        "responses": {
          "400": {
            "description": "Path is not defined by the app."
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "data"
        ],
        "summary": "Get partial custom data",
        "operationId": "getPartialData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Path to sub-object",
            "name": "section",
            "required": true,
            "type": "string",
            "default": "/Common"
          },
          {
            "in": "query",
            "description": "Optional comma separated list of fields in sub-object",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "400": {
            "description": "[{field}]: Operation \"{op}\" is not permitted for this type."
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "data"
        ],
        "summary": "Update partial custom data",
        "operationId": "updateData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Path to sub-object",
            "name": "section",
            "required": true,
            "type": "string",
            "default": "/"
          },
          {
            "in": "body",
            "description": "Data object with structure defined in app manifest.",
            "name": "requests",
            "required": true,
            "type": "array",
            "items": {
              "schema": {
                "$ref": "#/definitions/PatchRequest"
              }
            }
          }
        ]
      },
      "put": {
        "responses": {
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "data"
        ],
        "summary": "Update partial custom data",
        "operationId": "setPartialData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Path to sub-object.",
            "name": "section",
            "required": true,
            "type": "string",
            "default": "/"
          },
          {
            "in": "body",
            "description": "Data object with structure defined in app manifest.",
            "name": "body",
            "required": true,
            "type": "object"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/lists/{listId}/data/{path}": {
      "get": {
        "responses": {
          "400": {
            "description": "Field is not defined."
          },
          "404": {
            "description": "User list \"{listid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "lists"
        ],
        "summary": "Get lists' custom data",
        "operationId": "getListData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "List id",
            "name": "listId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Path to sub-object. Default is / (root)",
            "name": "section",
            "required": false,
            "type": "string",
            "default": "/"
          },
          {
            "in": "query",
            "description": "Optional comma separated list of fields in sub-object",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/health": {
      "get": {
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "description": "",
        "tags": [
          "health"
        ],
        "summary": "Test system health",
        "operationId": "getHealth",
        "produces": [
          "application/json"
        ]
      }
    },
    "/apps/{appid}/users/{uid}/lists/{listid}": {
      "get": {
        "responses": {
          "404": {
            "description": "User list \"{listid}\" not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ListGetResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "lists"
        ],
        "summary": "Get user List",
        "operationId": "getList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "List Id",
            "name": "listid",
            "required": true,
            "type": "string",
            "default": "friends"
          },
          {
            "in": "query",
            "description": "user vendor id",
            "name": "vid",
            "required": false,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "400": {
            "description": "\"listid\" and \"user list\" are required."
          },
          "404": {
            "description": "User list \"{listid}\" not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ListSendResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "lists"
        ],
        "summary": "Update User List",
        "operationId": "updateList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "List Id",
            "name": "listid",
            "required": true,
            "type": "string",
            "default": "friends"
          },
          {
            "in": "body",
            "description": "vid and lst values required",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRequest"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "400": {
            "description": "\"listid\" and \"user list\" are required."
          },
          "404": {
            "description": "User list \"{listid}\" not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ListSendResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "lists"
        ],
        "summary": "Set user List",
        "operationId": "postList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "List Id",
            "name": "listid",
            "required": true,
            "type": "string",
            "default": "friends"
          },
          {
            "in": "body",
            "description": "vid and lst values required",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRequest"
            }
          }
        ]
      },
      "delete": {
        "responses": {
          "400": {
            "description": "\"listid\" is required."
          },
          "404": {
            "description": "User list \"{listid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "lists"
        ],
        "summary": "Delete user List",
        "operationId": "deleteList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "List Id",
            "name": "listid",
            "required": true,
            "type": "string",
            "default": "friends"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/messages": {
      "get": {
        "responses": {
          "404": {
            "description": "Application \"{appid}\" not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          }
        },
        "description": "",
        "tags": [
          "messages"
        ],
        "summary": "Get messages",
        "operationId": "getMessages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "After this date (unix timestamp)",
            "name": "after",
            "required": false,
            "type": "string"
          }
        ]
      },
      "post": {
        "responses": {
          "400": {
            "description": "mids parameter is required."
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "messages"
        ],
        "summary": "post message",
        "operationId": "postMessage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Message",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MessageRequest"
            }
          }
        ]
      },
      "delete": {
        "responses": {
          "400": {
            "description": "mids parameter is required."
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "messages"
        ],
        "summary": "Delete messages",
        "operationId": "deleteMessages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Message Ids",
            "name": "mids",
            "required": true,
            "type": "string",
            "default": "1,3,5"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/scores?leads": {
      "get": {
        "responses": {
          "404": {
            "description": "Application \"{appid}\" not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ScoreList"
            }
          }
        },
        "description": "",
        "tags": [
          "scores"
        ],
        "summary": "Get scores for all leaderboards",
        "operationId": "getUserScores",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "User id",
            "name": "uid",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/leaderboards/{leaderboardId}/scores": {
      "get": {
        "responses": {
          "404": {
            "description": "Leaderboard not found"
          },
          "400": {
            "description": "You can get at most MULTIPLE_LIMIT(32) results."
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ScoreList"
            }
          }
        },
        "description": "",
        "tags": [
          "scores"
        ],
        "summary": "get scores of a leaderboard",
        "operationId": "getScores",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "leaderboard id",
            "name": "leaderboardId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "comma separated user ids",
            "required":false,
            "type":"string",
            "name":"uids"
          }
        ]
      },
      "post": {
        "responses": {
          "404": {
            "description": "Leaderboard not found"
          },
          "400": {
            "description": "score parameter is required."
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ScoreUpdateResult"
            }
          }
        },
        "description": "",
        "tags": [
          "scores"
        ],
        "summary": "Set score to a leaderboard",
        "operationId": "setScore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "leaderboard id",
            "name": "leaderboardId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "score data",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreRequest"
            }
          }
        ]
      },
      "delete": {
        "responses": {
          "404": {
            "description": "Leaderboard not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ScoreResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "scores"
        ],
        "summary": "Set score to a leaderboard",
        "operationId": "deleteScore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "leaderboard id",
            "name": "leaderboardId",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/lists/{listId}/leaderboards/{leaderboardId}/scores": {
      "get": {
        "responses": {
          "404": {
            "description": "list '{listId}' not found."
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ScoreList"
            }
          }
        },
        "description": "",
        "tags": [
          "scores"
        ],
        "summary": "Get scores for leaderboard of a list",
        "operationId": "getListLeaderboardScores",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "List id",
            "name": "listId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "leaderboard id",
            "name": "leaderboardId",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/tmpdata/{slotId}": {
      "get": {
        "responses": {
          "404": {
            "description": "'{slotId}' does not exist."
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UserTmpData"
            }
          }
        },
        "description": "",
        "tags": [
          "tmpdata"
        ],
        "summary": "Get user tmpdata",
        "operationId": "getUserTmpData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "slot id that defined by app",
            "name": "slotId",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "400": {
            "description": "ttl must be less than SLOT_MAX_LIFETIME seconds"
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "tmpdata"
        ],
        "summary": "Set user tmpdata",
        "operationId": "setUserTmpData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "slot id that defined by app",
            "name": "slotId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "value and ttl values required",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserTmpData"
            }
          }
        ]
      },
      "delete": {
        "responses": {
          "404": {
            "description": "'{slotId}' does not exist."
          }
        },
        "description": "",
        "tags": [
          "tmpdata"
        ],
        "summary": "Delete user tmpdata",
        "operationId": "deleteUserTmpData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "user id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "slot id that defined by app",
            "name": "slotId",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/oauth2/token": {
      "post": {
        "responses": {
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Invalid Client"
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        },
        "description": "",
        "tags": [
          "token"
        ],
        "summary": "Create access token",
        "operationId": "createAccessToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "Token request",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenRequest"
            }
          }
        ]
      }
    },
    "/apps/{appid}/users": {
      "post": {
        "responses": {
          "400": {
            "description": "\"vid\", \"uvid\", \"credentials\" and \"type\" parameters are required"
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UserCreateResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "users"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "User info",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          },
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/vendorusers": {
      "put": {
        "responses": {
          "400": {
            "description": "\"vid\", \"uvid\", \"credentials\" and \"type\" parameters are required"
          },
          "404": {
            "description": "User \"{uid}\" not found"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AddMoveVendorResponse"
            }
          }
        },
        "description": "",
        "tags": [
          "users"
        ],
        "summary": "Add/Move vendor",
        "operationId": "addMoveVendor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "User info",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          },
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "User Id",
            "name": "uid",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/details": {
      "get": {
        "responses": {
          "404": {
            "description": "User \"{uid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "users"
        ],
        "summary": "Get user details",
        "operationId": "getUserDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "User Id",
            "name": "uid",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{vuid}/details/type/uservendor": {
      "get": {
        "responses": {
          "404": {
            "description": "User \"{vuid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "users"
        ],
        "summary": "Get user details",
        "operationId": "getUserDetailsWithVuid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Vendor User Id (fbId)",
            "name": "vuid",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/details/status": {
      "put": {
        "responses": {
          "404": {
            "description": "UserApp not found: {uid}"
          }
        },
        "description": "",
        "tags": [
          "users"
        ],
        "summary": "Change user status [Developer]",
        "operationId": "changeSta",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "User Id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "status",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserStatus"
            }
          }
        ]
      }
    },
    "/apps/{appid}/users/{uid}/{status}": {
      "put": {
        "responses": {
          "404": {
            "description": "UserApp not found: {uid}"
          }
        },
        "description": "",
        "tags": [
          "users"
        ],
        "summary": "Change user status",
        "operationId": "UpdateStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "User Id",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "status",
            "name": "status",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/apps/{appid}/users/{userTypeId}/type/{userType}/style/{deleteStyle}": {
      "delete": {
        "responses": {
          "400": {
            "description": "Data error: Uid {userTypeId} does not exis"
          },
          "404": {
            "description": "Application \"{appid}\" not found"
          }
        },
        "description": "",
        "tags": [
          "users"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Application Id",
            "name": "appid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "User Id or user vendor id",
            "name": "userTypeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "User Id or user vendor id",
            "name": "userType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Delete Style",
            "name": "deleteStyle",
            "required": true,
            "type": "string"
          }
        ]
      }
    }
  },
  "securityDefinitions": {
     "bearer":{
      "type": "oauth2",
      "authorizationUrl": ""
    }
  },
  "host": null,
  "basePath": "/",
  "tags": [
    {
      "name": "api-docs/listings/health",
      "description": "Health Api"
    },
    {
      "name": "api-docs/listings/tokens",
      "description": "Access Tokens Api"
    },
    {
      "name": "api-docs/listings/users",
      "description": "Users Api"
    },
    {
      "name": "api-docs/listings/apps",
      "description": "Apps Api"
    },
    {
      "name": "api-docs/listings/scores",
      "description": "Scores Api"
    },
    {
      "name": "api-docs/listings/data",
      "description": "User Data Api"
    },
    {
      "name": "api-docs/listings/tmpdata",
      "description": "User Tmp Data Api"
    },
    {
      "name": "api-docs/listings/message",
      "description": "Messages Api"
    },
    {
      "name": "api-docs/listings/lists",
      "description": "Lists Api"
    },
    {
      "name": "api-docs/listings/analysis",
      "description": "Analysis Api"
    },
    {
      "name": "api-docs/listings/batch",
      "description": "Batch Api"
    }
  ],
  "definitions": {
    "Action": {
      "properties": {
        "actionid": {
          "type": "string",
          "description": "Action Id"
        },
        "uid": {
          "type": "string",
          "description": "User id"
        },
        "tmc": {
          "type": "string",
          "description": ""
        },
        "vuid": {
          "type": "string",
          "description": "vendor id"
        }
      },
      "required": [
        "actionid",
        "uid",
        "tmc",
        "vuid"
      ]
    },
    "AnalysisResponse": {
      "properties": {
        "LastEvaluatedKey": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          }
        }
      },
      "required": [
        "LastEvaluatedKey",
        "actions"
      ]
    },
    "AnalysisResponseDetails": {
      "properties": {
        "LastEvaluatedKey": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "LastEvaluatedKey",
        "users"
      ]
    },
    "App": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of app"
        },
        "name": {
          "type": "string",
          "description": "Name of app"
        },
        "services": {
          "type": "string",
          "description": "Servises which app provides"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Request": {
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "HEAD",
            "OPTIONS"
          ],
          "description": "Http method"
        },
        "path": {
          "type": "string",
          "description": "/path/to/resource"
        },
        "body": {
          "type": "string",
          "description": "Request body"
        }
      },
      "required": [
        "method",
        "path"
      ]
    },
    "BatchRequest": {
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Request"
          }
        }
      },
      "required": [
        "requests"
      ]
    },
    "BatchResponse": {
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response"
          }
        }
      },
      "required": [
        "responses"
      ]
    },
    "Response": {
      "properties": {
        "status": {
          "type": "string",
          "description": "Response Status"
        },
        "data": {
          "type": "string",
          "description": "Response data"
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "description": "Error code"
        },
        "message": {
          "type": "string",
          "description": "Error message"
        }
      },
      "required": [
        "status"
      ]
    },
    "PatchRequest": {
      "properties": {
        "path": {
          "type": "string",
          "description": "path to modification eg. '/co'"
        },
        "op": {
          "type": "string",
          "description": "Operation",
          "enum": [
            "replace",
            "add",
            "remove"
          ]
        },
        "value": {
          "type": "object",
          "description": "value"
        }
      },
      "required": [
        "path",
        "op",
        "value"
      ]
    },
    "Patch":{
      "properties": {
        "requests":{
          "type": "array",
          "items": {
            "$ref": "#/definitions/PatchRequest"
          }
        }
      }
    },
    "ListEntity": {
      "properties": {
        "appuid": {
          "type": "string",
          "description": "user id"
        },
        "uvid": {
          "type": "string",
          "description": "user vendor id"
        }
      },
      "required": [
        "appuid"
      ]
    },
    "ListRequest": {
      "properties": {
        "vid": {
          "type": "string",
          "description": "vendor id"
        },
        "lst": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "lst",
        "vid"
      ]
    },
    "ListSendResponse": {
      "properties": {
        "valid": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "invalid": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "valid",
        "invalid"
      ]
    },
    "ListGetResponse": {
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListEntity"
          }
        }
      },
      "required": [
        "list"
      ]
    },
    "MessageRequest": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Message type"
        },
        "message": {
          "type": "string",
          "description": "Message text"
        },
        "exp": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "type",
        "message",
        "exp"
      ]
    },
    "MessageInfo": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Message type"
        },
        "message": {
          "type": "string",
          "description": "Message text"
        },
        "appuid": {
          "type": "string",
          "description": "Message owner's appuid"
        },
        "exp": {
          "type": "string",
          "description": ""
        },
        "mid": {
          "type": "string",
          "description": "Message Id"
        },
        "ts": {
          "type": "string",
          "description": "Unix timestamp"
        }
      },
      "required": [
        "type",
        "message",
        "exp"
      ]
    },
    "MessageList": {
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageInfo"
          }
        }
      },
      "required": [
        "messages"
      ]
    },
    "ScoreResponse": {
      "properties": {
        "score": {
          "type": "integer",
          "format": "int64"
        },
        "tag": {
          "type": "string"
        },
        "lid": {
          "type": "string",
          "description": "leaderboard id"
        },
        "uid": {
          "type": "string",
          "description": "user id"
        }
      },
      "required": [
        "score"
      ]
    },
    "ScoreUpdateResult": {
      "properties": {
        "updated": {
          "type": "boolean",
          "description": "update result"
        }
      },
      "required": [
        "updated"
      ]
    },
    "ScoreRequest": {
      "properties": {
        "score": {
          "type": "integer",
          "format": "int64"
        },
        "tag": {
          "type": "string"
        }
      },
      "required": [
        "score"
      ]
    },
    "ScoreList": {
      "properties": {
        "scores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScoreResponse"
          }
        }
      },
      "required": [
        "scores"
      ]
    },
    "UserTmpData": {
      "properties": {
        "value": {
          "type": "string"
        },
        "ttl": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Token": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string",
          "description": "type of token "
        },
        "expires_in": {
          "type": "integer",
          "description": "expiration date unix timestamp"
        },
        "scope": {
          "type": "string",
          "description": "scope of permissions"
        },
        "uid": {
          "type": "string",
          "description": "user id"
        },
        "mac_key": {
          "type": "string",
          "description": "encrypted mac_key"
        },
        "mac_algorithm": {
          "type": "string",
          "description": "the algorithm for hmac"
        },
        "mac_key_enc_alg": {
          "type": "string",
          "description": "the algorithm for encrypting mac_key"
        },
        "kid": {
          "type": "string",
          "description": "kid of mac token"
        }
      },
      "required": [
        "access_token",
        "token_type",
        "expires_at",
        "scope"
      ]
    },
    "TokenRequest": {
      "properties": {
        "grant_type": {
          "type": "string",
          "description": "Type of authorization grant",
          "enum": [
            "client_credentials",
            "password"
          ]
        },
        "client_id": {
          "type": "string",
          "description": "Client id"
        },
        "client_secret": {
          "type": "string",
          "description": "Client secret"
        },
        "token_type": {
          "type": "string",
          "description": "type of token "
        },
        "scope": {
          "type": "string",
          "description": "Scope of permission",
          "enum": [
            "user:apps.{appid}",
            "developer:apps.{appid}",
            "analysis",
            "admin"
          ]
        },
        "username": {
          "type": "string",
          "description": "equired when grant_type is password"
        },
        "password": {
          "type": "string",
          "description": "required when grant_type is password"
        }
      },
      "required": [
        "grant_type",
        "client_id",
        "client_secret",
        "scope"
      ]
    },
    "UserStatus": {
      "properties": {
        "sta": {
          "type": "integer",
          "format": "int64",
          "description": "user status"
        }
      },
      "required": [
        "sta"
      ]
    },
    "UserCreateResponse": {
      "properties": {
        "appuid": {
          "type": "string",
          "description": "user id"
        },
        "tmc": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "appuid",
        "tmc"
      ]
    },
    "UserRequest": {
      "properties": {
        "vid": {
          "type": "string",
          "description": "vendor id",
          "enum": [
            "fb",
            "dum"
          ]
        },
        "uvid": {
          "type": "string",
          "description": "vendor user id. e.g: facebook id of user"
        },
        "credentials": {
          "type": "string",
          "description": "vendor credentials. 'signed_request'"
        },
        "type": {
          "type": "string",
          "description": "type of user",
          "enum": [
            "1",
            "2"
          ]
        }
      },
      "required": [
        "vid",
        "uvid",
        "credentials"
      ]
    },
    "AddMoveVendorResponse": {
      "properties": {
        "appuid": {
          "type": "string",
          "description": "user id"
        },
        "action": {
          "type": "string",
          "description": " Add or Move"
        }
      },
      "required": [
        "appuid",
        "action"
      ]
    }
  }
}
